{"ast":null,"code":"export const getProducts = async () => {\n  try {\n    const response = await fetch(\"http://localhost:4000/sales\");\n    if (!response.ok) {\n      throw new Error('Failed to fetch data');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return null;\n  }\n};\nexport const getProductByBarcode = async barcode => {\n  try {\n    const response = await fetch(\"http://localhost:4000/sales\");\n    if (!response.ok) {\n      throw new Error('Failed to fetch data');\n    }\n    const data = await response.json();\n    const product = data.find(product => product.barcode === barcode);\n    if (!product) {\n      throw new Error('Product not found');\n    }\n    return product;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return null;\n  }\n};\n\n// export const postAllProductsWithUpdates = async (products) => {\n//     try {\n//         const response = await fetch(\"http://localhost:4000/sales\", {\n//             method: 'POST',\n//             // mode: 'no-cors',\n//             headers: {'Content-Type': 'application/json'},\n//             body: JSON.stringify(products),\n//         });\n//         if (!response.ok) {\n//             throw new Error(`Failed to Update Product Stock, And Status Is: ${response.statusText}`);\n//         }\n\n//         return true;\n//     } catch (error) {\n//         console.error(error);\n//         return null;\n//     }\n// };\n\n// export const updateProductStockInDB = async (barcode, newStock) => {\n//     // Get All Products\n//     const products = await getProducts();\n//     // Update Product Stock\n//     products.forEach((product) => {\n//         if (product.barcode === barcode) {\n//             product.stock = newStock;\n//         }\n//     });\n//     console.log(products);\n//     // Set Updated Products Data And Return Operation State\n//     return postAllProductsWithUpdates(products);\n// };","map":{"version":3,"names":["getProducts","response","fetch","ok","Error","data","json","error","console","getProductByBarcode","barcode","product","find"],"sources":["D:/web/Work/ToysBox/Mini Cashear System/mini-toysBox-car-casher-sys/src/helpers.js"],"sourcesContent":["export const getProducts = async () => {\r\n    try {\r\n        const response = await fetch(\"http://localhost:4000/sales\");\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch data');\r\n        }\r\n        \r\n        const data = await response.json();\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        return null;\r\n    }\r\n};\r\nexport const getProductByBarcode = async (barcode) => {\r\n    try {\r\n        const response = await fetch(\"http://localhost:4000/sales\");\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch data');\r\n        }\r\n        \r\n        const data = await response.json();\r\n        const product = data.find((product) => product.barcode === barcode);\r\n        if (!product) {\r\n            throw new Error('Product not found');\r\n        }\r\n        return product;\r\n    } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        return null;\r\n    }\r\n};\r\n\r\n// export const postAllProductsWithUpdates = async (products) => {\r\n//     try {\r\n//         const response = await fetch(\"http://localhost:4000/sales\", {\r\n//             method: 'POST',\r\n//             // mode: 'no-cors',\r\n//             headers: {'Content-Type': 'application/json'},\r\n//             body: JSON.stringify(products),\r\n//         });\r\n//         if (!response.ok) {\r\n//             throw new Error(`Failed to Update Product Stock, And Status Is: ${response.statusText}`);\r\n//         }\r\n        \r\n//         return true;\r\n//     } catch (error) {\r\n//         console.error(error);\r\n//         return null;\r\n//     }\r\n// };\r\n\r\n// export const updateProductStockInDB = async (barcode, newStock) => {\r\n//     // Get All Products\r\n//     const products = await getProducts();\r\n//     // Update Product Stock\r\n//     products.forEach((product) => {\r\n//         if (product.barcode === barcode) {\r\n//             product.stock = newStock;\r\n//         }\r\n//     });\r\n//     console.log(products);\r\n//     // Set Updated Products Data And Return Operation State\r\n//     return postAllProductsWithUpdates(products);\r\n// };\r\n"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC;IAC3D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IAC3C;IAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO,IAAI;EACf;AACJ,CAAC;AACD,OAAO,MAAME,mBAAmB,GAAG,MAAOC,OAAO,IAAK;EAClD,IAAI;IACA,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC;IAC3D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IAC3C;IAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,MAAMK,OAAO,GAAGN,IAAI,CAACO,IAAI,CAAED,OAAO,IAAKA,OAAO,CAACD,OAAO,KAAKA,OAAO,CAAC;IACnE,IAAI,CAACC,OAAO,EAAE;MACV,MAAM,IAAIP,KAAK,CAAC,mBAAmB,CAAC;IACxC;IACA,OAAOO,OAAO;EAClB,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO,IAAI;EACf;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}