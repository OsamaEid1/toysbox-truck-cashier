{"ast":null,"code":"export const getProducts = async () => {\n  try {\n    const response = await fetch(\"http://localhost:4000/sales\");\n    if (!response.ok) {\n      throw new Error('Failed to fetch data');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return null;\n  }\n};\nexport const setProducts = async products => {\n  try {\n    const response = await fetch(\"http://localhost:4000/sales\", {\n      method: 'POST',\n      // mode: 'no-cors',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(products)\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to Update Product Stock, And Status Is: ${response.statusText}`);\n    }\n    return true;\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n};\nexport const getProductByBarcode = async barcode => {\n  try {\n    const response = await fetch(\"http://localhost:4000/sales\");\n    if (!response.ok) {\n      throw new Error('Failed to fetch data');\n    }\n    const data = await response.json();\n    const product = data.find(product => product.barcode === barcode);\n    if (!product) {\n      throw new Error('Product not found');\n    }\n    return product;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return null;\n  }\n};\nexport const updateProductStockInDB = async (barcode, newStock) => {\n  // Get All Products\n  const products = await getProducts();\n  // Update Product Stock\n  console.log(products);\n  products.forEach(product => {\n    if (product.barcode === barcode) {\n      product.stock = newStock;\n    }\n  });\n  // Set Updated Products Data And Return Operation State\n  return setProducts(products);\n};\nexport const addNewSell = async product => {\n  try {\n    // Get sales\n    let sales = localStorage.getItem(\"sales\");\n    if (sales) {\n      sales = JSON.parse(sales);\n      sales.push(product);\n      // Save product data to localStorage\n      localStorage.setItem('sales', JSON.stringify(sales));\n    } else {\n      // Save product data to localStorage\n      localStorage.setItem('sales', JSON.stringify([product]));\n    }\n    return true;\n  } catch (error) {\n    console.error('Error while posting data:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["getProducts","response","fetch","ok","Error","data","json","error","console","setProducts","products","method","headers","body","JSON","stringify","statusText","getProductByBarcode","barcode","product","find","updateProductStockInDB","newStock","log","forEach","stock","addNewSell","sales","localStorage","getItem","parse","push","setItem"],"sources":["D:/web/Work/ToysBox/Mini Cashear System/mini-toysBox-car-casher-sys/src/helpers.js"],"sourcesContent":["export const getProducts = async () => {\r\n    try {\r\n        const response = await fetch(\"http://localhost:4000/sales\");\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch data');\r\n        }\r\n        \r\n        const data = await response.json();\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        return null;\r\n    }\r\n};\r\nexport const setProducts = async (products) => {\r\n    try {\r\n        const response = await fetch(\"http://localhost:4000/sales\", {\r\n            method: 'POST',\r\n            // mode: 'no-cors',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(products),\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error(`Failed to Update Product Stock, And Status Is: ${response.statusText}`);\r\n        }\r\n        \r\n        return true;\r\n    } catch (error) {\r\n        console.error(error);\r\n        return null;\r\n    }\r\n};\r\nexport const getProductByBarcode = async (barcode) => {\r\n    try {\r\n        const response = await fetch(\"http://localhost:4000/sales\");\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch data');\r\n        }\r\n        \r\n        const data = await response.json();\r\n        const product = data.find((product) => product.barcode === barcode);\r\n        if (!product) {\r\n            throw new Error('Product not found');\r\n        }\r\n        return product;\r\n    } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const updateProductStockInDB = async (barcode, newStock) => {\r\n    // Get All Products\r\n    const products = await getProducts();\r\n    // Update Product Stock\r\n    console.log(products);\r\n    products.forEach((product) => {\r\n        if (product.barcode === barcode) {\r\n            product.stock = newStock;\r\n        }\r\n    });\r\n    // Set Updated Products Data And Return Operation State\r\n    return setProducts(products);\r\n};\r\n\r\nexport const addNewSell = async (product) => {\r\n    try {\r\n        // Get sales\r\n        let sales = localStorage.getItem(\"sales\");\r\n        if (sales) {\r\n            sales = JSON.parse(sales);\r\n            sales.push(product);\r\n            // Save product data to localStorage\r\n            localStorage.setItem('sales', JSON.stringify(sales));\r\n        } else {\r\n            // Save product data to localStorage\r\n            localStorage.setItem('sales', JSON.stringify([product]));\r\n        }\r\n        return true;\r\n    } catch (error) {\r\n        console.error('Error while posting data:', error);\r\n        return false;\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}