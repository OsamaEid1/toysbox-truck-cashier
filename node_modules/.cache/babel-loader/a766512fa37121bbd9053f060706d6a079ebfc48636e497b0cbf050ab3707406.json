{"ast":null,"code":"export const getProducts = async () => {\n  try {\n    const response = await fetch(\"db/products.json\");\n    if (!response.ok) {\n      throw new Error('Failed to fetch data');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return null;\n  }\n};\nexport const getProductByBarcode = async barcode => {\n  try {\n    const response = await fetch(\"db/products.json\");\n    if (!response.ok) {\n      throw new Error('Failed to fetch data');\n    }\n    const data = await response.json();\n    console.log(data);\n    const product = data.find(product => product.barcode === barcode);\n    if (!product) {\n      throw new Error('Product not found');\n    }\n    return product;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return null;\n  }\n};\nexport const searchOnProductByName = (products, targetProductName) => {\n  const matchingProducts = [];\n  products.forEach(product => {\n    const productName = product.name;\n    if (productName.toLowerCase().includes(targetProductName.toLowerCase())) {\n      matchingProducts.push(product);\n    }\n  });\n  return matchingProducts;\n};\nexport const searchOnProductByBarcode = (products, barcode) => {\n  const targetProduct = products.find(product => product.barcode === barcode);\n  if (targetProduct) return targetProduct;\n  return false;\n};\nexport const addNewSell = async product => {\n  try {\n    // Get sales\n    let sales = localStorage.getItem(\"sales\");\n    if (sales) {\n      sales = JSON.parse(sales);\n      sales.push(product);\n      // Save product data to localStorage\n      localStorage.setItem('sales', JSON.stringify(sales));\n    } else {\n      // Save product data to localStorage\n      localStorage.setItem('sales', JSON.stringify([product]));\n    }\n    return true;\n  } catch (error) {\n    console.error('Error while posting data:', error);\n    return false;\n  }\n};\nexport const countRepeatedSales = soldProducts => {\n  // Create a map to store the aggregated quantities\n  const qtyMap = new Map();\n\n  // Iterate through the products array\n  for (const product of soldProducts) {\n    const {\n      barcode,\n      qty,\n      price\n    } = product;\n\n    // If the barcode is not in the map, initialize it with the current qty\n    if (!qtyMap.has(barcode)) {\n      qtyMap.set(barcode, {\n        ...product,\n        totalSoldQty: +qty,\n        totalPrice: Math.ceil(price) * qty,\n        numOfRepeatSales: 1\n      });\n    } else {\n      // Otherwise, update the existing entry\n      const existingProduct = qtyMap.get(barcode);\n      existingProduct.totalSoldQty += +qty;\n      existingProduct.numOfRepeatSales++;\n      existingProduct.totalPrice += Math.ceil(+price) * qty;\n    }\n  }\n\n  // Convert the map values back to an array\n  const summedProducts = Array.from(qtyMap.values());\n  return summedProducts;\n};\nexport const getSalesSummary = salesData => {\n  return countRepeatedSales(salesData);\n};\nexport const getDiscountedSales = salesData => {\n  const sales = salesData.filter(product => product.discount === \"نعم\");\n  return sales;\n};\nexport const calculateTotalMoneyForSummary = sales => {\n  const totalMoney = sales.reduce((total, sale) => {\n    return total += sale.totalPrice;\n  }, 0);\n  return totalMoney;\n};\nexport const calculateTotalMoneyForDetailedSales = sales => {\n  const totalMoney = sales.reduce((total, sale) => {\n    return total += sale.qty * sale.price;\n  }, 0);\n  return totalMoney;\n};\nexport const calculateTotalMoneyForDiscountedSalesBeforeDiscount = sales => {\n  const totalMoney = sales.reduce((total, sale) => {\n    return total += sale.qty * sale.priceBeforeDiscount;\n  }, 0);\n  return totalMoney;\n};\nexport const getTotalSoldPiecesForSummarySales = sales => {\n  return sales.reduce((total, sale) => {\n    return total += +sale.totalSoldQty;\n  }, 0);\n};\nexport const getTotalSoldPiecesForSalesHistory = sales => {\n  return sales.reduce((total, sale) => {\n    return total += +sale.qty;\n  }, 0);\n};\nexport const getTotalSoldPiecesForDiscountedSales = sales => {\n  return sales.reduce((total, sale) => {\n    return total += +sale.qty;\n  }, 0);\n};\nexport const createReportTextForSalesSummary = salesInfo => {\n  const sales = salesInfo.sales;\n  let text = `**تقرير بملخص المبيعات** \\n`;\n  sales.map(sale => {\n    text += `\n        اسم المنتج: ${sale.name}\n        الكود: ${sale.barcode}\n        الكمية المُباعة: ${sale.totalSoldQty}\n        عدد مرات البيع: ${sale.numOfRepeatSales}\n        إجمالي المبلغ: $${sale.totalPrice}\n        \n        ------\n        `;\n  });\n  text += `---------------------------------`;\n  text += `\\n\\n إجمالي عدد الأصناف المُباعة: ${salesInfo.totalSoldItems}`;\n  text += `\\n إجمالي عدد القطع المُباعة: ${salesInfo.totalSoldPieces}`;\n  text += `\\n إجمالي مبلغ المبيعات: $${salesInfo.totalMoney.toLocaleString()}`;\n  text += `\\n هذا التقرير تم إصداره في ${new Date().toLocaleString()}`;\n  return text;\n};\nexport const createReportTextForSalesHistory = salesInfo => {\n  const sales = salesInfo.sales;\n  let text = `**تقرير بسجل عمليات البيع** \\n`;\n  sales.map(sale => {\n    text += `\n        اسم المنتج: ${sale.name}\n        الكود: ${sale.barcode}\n        سعر القطعة: ${sale.price}\n        الكمية المُباعة: ${sale.qty}\n        هل يوجد خصم؟ ${sale.discount}\n        تاريخ البيع: ${sale.date}\n\n        ------\n        `;\n  });\n  text += `---------------------------------`;\n  text += `\\n\\n إجمالي مبلغ المبيعات: $${salesInfo.totalMoney.toLocaleString()}`;\n  text += `\\n\\n إجمالي مبلغ المبيعات: $${salesInfo.totalMoney.toLocaleString()}`;\n  text += `\\n هذا التقرير تم إصداره في ${new Date().toLocaleString()}`;\n  return text;\n};\nexport const createReportTextForDiscountedSales = salesInfo => {\n  const sales = salesInfo.sales;\n  let text = `**تقرير بعمليات البيع المُخفضة** \\n`;\n  sales.map(sale => {\n    text += `\n        اسم المنتج: ${sale.name}\n        الكود: ${sale.barcode}\n        سعر القطعة قبل الخصم: ${sale.priceBeforeDiscount}\n        سعر القطعة بعد الخصم: ${sale.price}\n        الكمية المُباعة: ${sale.qty}\n        تاريخ البيع: ${sale.date}\n        ------\n        `;\n  });\n  text += `---------------------------------`;\n  text += `\\n\\n إجمالي عدد عمليات الخصم: ${salesInfo.totalDiscountsSales}`;\n  text += `\\n\\n إجمالي عدد عمليات الخصم: ${salesInfo.totalDiscountsSales}`;\n  text += `\\n إجمالي مبلغ الخصم: $${salesInfo.totalDiscountsMoney.toLocaleString()}`;\n  text += `\\n من أصل إجمالي مبلغ $${salesInfo.totalMoney.toLocaleString()}`;\n  text += `\\n هذا التقرير تم إصداره في ${new Date().toLocaleString()}`;\n  return text;\n};\nexport const createDetailedSalesReport = sales => {\n  const totalMoney = calculateTotalMoneyForDetailedSales(sales);\n  const totalSoldPieces = getTotalSoldPiecesForSalesHistory(sales);\n  const salesInfo = {\n    sales: sales,\n    totalMoney: totalMoney,\n    totalSoldPieces: totalSoldPieces\n  };\n  const text = createReportTextForSalesHistory(salesInfo);\n  const reportName = \"تقرير بسجل عمليات البيع\";\n  return {\n    text,\n    reportName\n  };\n};\nexport const encodeText = text => {\n  const encoder = new TextEncoder();\n  return encoder.encode(text);\n};\nexport const downloadReport = (reportText, reportName) => {\n  const blob = new Blob([encodeText(reportText)], {\n    type: 'text/plain'\n  });\n  // Create The Download Link And Download The File\n  const downloadLink = document.createElement(\"a\");\n  downloadLink.href = URL.createObjectURL(blob);\n  downloadLink.download = `${reportName}.txt`;\n  downloadLink.click();\n  // Clean up the temporary URL after download (optional)\n  URL.revokeObjectURL(downloadLink.href);\n};","map":{"version":3,"names":["getProducts","response","fetch","ok","Error","data","json","error","console","getProductByBarcode","barcode","log","product","find","searchOnProductByName","products","targetProductName","matchingProducts","forEach","productName","name","toLowerCase","includes","push","searchOnProductByBarcode","targetProduct","addNewSell","sales","localStorage","getItem","JSON","parse","setItem","stringify","countRepeatedSales","soldProducts","qtyMap","Map","qty","price","has","set","totalSoldQty","totalPrice","Math","ceil","numOfRepeatSales","existingProduct","get","summedProducts","Array","from","values","getSalesSummary","salesData","getDiscountedSales","filter","discount","calculateTotalMoneyForSummary","totalMoney","reduce","total","sale","calculateTotalMoneyForDetailedSales","calculateTotalMoneyForDiscountedSalesBeforeDiscount","priceBeforeDiscount","getTotalSoldPiecesForSummarySales","getTotalSoldPiecesForSalesHistory","getTotalSoldPiecesForDiscountedSales","createReportTextForSalesSummary","salesInfo","text","map","totalSoldItems","totalSoldPieces","toLocaleString","Date","createReportTextForSalesHistory","date","createReportTextForDiscountedSales","totalDiscountsSales","totalDiscountsMoney","createDetailedSalesReport","reportName","encodeText","encoder","TextEncoder","encode","downloadReport","reportText","blob","Blob","type","downloadLink","document","createElement","href","URL","createObjectURL","download","click","revokeObjectURL"],"sources":["D:/web/Free_Projects/mini-toysBox-truck-cashier-sys/src/helpers.js"],"sourcesContent":["export const getProducts = async () => {\r\n    try {\r\n        const response = await fetch(\"db/products.json\");\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch data');\r\n        }\r\n        \r\n        const data = await response.json();\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        return null;\r\n    }\r\n};\r\nexport const getProductByBarcode = async (barcode) => {\r\n    try {\r\n        const response = await fetch(\"db/products.json\");\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch data');\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log(data);\r\n        const product = data.find((product) => product.barcode === barcode);\r\n        if (!product) {\r\n            throw new Error('Product not found');\r\n        }\r\n        return product;\r\n    } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        return null;\r\n    }\r\n};\r\nexport const searchOnProductByName = (products, targetProductName) => {\r\n    const matchingProducts = []\r\n    products.forEach((product) => {\r\n        const productName = product.name;\r\n        if (productName.toLowerCase().includes(targetProductName.toLowerCase())) {\r\n            matchingProducts.push(product)\r\n        }\r\n    });\r\n    return matchingProducts;\r\n};\r\nexport const searchOnProductByBarcode = (products, barcode) => {\r\n    const targetProduct = products.find(product => product.barcode === barcode);\r\n    if (targetProduct) return targetProduct;\r\n    return false;\r\n};\r\nexport const addNewSell = async (product) => {\r\n    try {\r\n        // Get sales\r\n        let sales = localStorage.getItem(\"sales\");\r\n        if (sales) {\r\n            sales = JSON.parse(sales);\r\n            sales.push(product);\r\n            // Save product data to localStorage\r\n            localStorage.setItem('sales', JSON.stringify(sales));\r\n        } else {\r\n            // Save product data to localStorage\r\n            localStorage.setItem('sales', JSON.stringify([product]));\r\n        }\r\n        return true;\r\n    } catch (error) {\r\n        console.error('Error while posting data:', error);\r\n        return false;\r\n    }\r\n};\r\n\r\nexport const countRepeatedSales = (soldProducts) => {\r\n    // Create a map to store the aggregated quantities\r\n    const qtyMap = new Map();\r\n\r\n    // Iterate through the products array\r\n    for (const product of soldProducts) {\r\n        const { barcode, qty, price } = product;\r\n\r\n        // If the barcode is not in the map, initialize it with the current qty\r\n        if (!qtyMap.has(barcode)) {\r\n            qtyMap.set(barcode, { ...product, totalSoldQty: +qty, totalPrice: Math.ceil(price) * qty, numOfRepeatSales: 1 });\r\n        } else {\r\n            // Otherwise, update the existing entry\r\n            const existingProduct = qtyMap.get(barcode);\r\n            existingProduct.totalSoldQty += +qty;\r\n            existingProduct.numOfRepeatSales++;\r\n            existingProduct.totalPrice += Math.ceil(+price) * qty;\r\n        }\r\n    }\r\n\r\n    // Convert the map values back to an array\r\n    const summedProducts = Array.from(qtyMap.values());\r\n    return summedProducts;\r\n}\r\n\r\nexport const getSalesSummary = (salesData) => {\r\n    return countRepeatedSales(salesData);\r\n};\r\nexport const getDiscountedSales = (salesData) => {\r\n    const sales = salesData.filter((product) => product.discount === \"نعم\");\r\n    return sales;\r\n};\r\n\r\nexport const calculateTotalMoneyForSummary = (sales) => {\r\n    const totalMoney = sales.reduce((total, sale) => {\r\n        return total += sale.totalPrice;\r\n    }, 0);\r\n    return totalMoney;\r\n};\r\nexport const calculateTotalMoneyForDetailedSales = (sales) => {\r\n    const totalMoney = sales.reduce((total, sale) => {\r\n        return total += sale.qty * sale.price;\r\n    }, 0);\r\n    return totalMoney;\r\n};\r\nexport const calculateTotalMoneyForDiscountedSalesBeforeDiscount = (sales) => {\r\n    const totalMoney = sales.reduce((total, sale) => {\r\n        return total += sale.qty * sale.priceBeforeDiscount;\r\n    }, 0);\r\n    return totalMoney;\r\n};\r\n\r\nexport const getTotalSoldPiecesForSummarySales = (sales) => {\r\n    return sales.reduce((total, sale) => {\r\n        return total += +sale.totalSoldQty;\r\n    }, 0)\r\n}\r\nexport const getTotalSoldPiecesForSalesHistory = (sales) => {\r\n    return sales.reduce((total, sale) => {\r\n        return total += +sale.qty;\r\n    }, 0)\r\n}\r\nexport const getTotalSoldPiecesForDiscountedSales = (sales) => {\r\n    return sales.reduce((total, sale) => {\r\n        return total += +sale.qty;\r\n    }, 0)\r\n}\r\n\r\nexport const createReportTextForSalesSummary = (salesInfo) => {\r\n    const sales = salesInfo.sales;\r\n\r\n    let text = `**تقرير بملخص المبيعات** \\n`;\r\n    sales.map((sale) => {\r\n        text += `\r\n        اسم المنتج: ${sale.name}\r\n        الكود: ${sale.barcode}\r\n        الكمية المُباعة: ${sale.totalSoldQty}\r\n        عدد مرات البيع: ${sale.numOfRepeatSales}\r\n        إجمالي المبلغ: $${sale.totalPrice}\r\n        \r\n        ------\r\n        `;\r\n    });\r\n\r\n    text += `---------------------------------`;\r\n    text += `\\n\\n إجمالي عدد الأصناف المُباعة: ${salesInfo.totalSoldItems}`;\r\n    text += `\\n إجمالي عدد القطع المُباعة: ${salesInfo.totalSoldPieces}`;\r\n    text += `\\n إجمالي مبلغ المبيعات: $${salesInfo.totalMoney.toLocaleString()}`;\r\n    text += `\\n هذا التقرير تم إصداره في ${new Date().toLocaleString()}`;\r\n    \r\n    return text;\r\n};\r\nexport const createReportTextForSalesHistory = (salesInfo) => {\r\n    const sales = salesInfo.sales;\r\n\r\n    let text = `**تقرير بسجل عمليات البيع** \\n`;\r\n    sales.map((sale) => {\r\n        text += `\r\n        اسم المنتج: ${sale.name}\r\n        الكود: ${sale.barcode}\r\n        سعر القطعة: ${sale.price}\r\n        الكمية المُباعة: ${sale.qty}\r\n        هل يوجد خصم؟ ${sale.discount}\r\n        تاريخ البيع: ${sale.date}\r\n\r\n        ------\r\n        `;\r\n    });\r\n\r\n    text += `---------------------------------`;\r\n    text += `\\n\\n إجمالي مبلغ المبيعات: $${salesInfo.totalMoney.toLocaleString()}`;\r\n    text += `\\n\\n إجمالي مبلغ المبيعات: $${salesInfo.totalMoney.toLocaleString()}`;\r\n    text += `\\n هذا التقرير تم إصداره في ${new Date().toLocaleString()}`;\r\n    \r\n    return text;\r\n};\r\nexport const createReportTextForDiscountedSales = (salesInfo) => {\r\n    const sales = salesInfo.sales;\r\n\r\n    let text = `**تقرير بعمليات البيع المُخفضة** \\n`;\r\n    sales.map((sale) => {\r\n        text += `\r\n        اسم المنتج: ${sale.name}\r\n        الكود: ${sale.barcode}\r\n        سعر القطعة قبل الخصم: ${sale.priceBeforeDiscount}\r\n        سعر القطعة بعد الخصم: ${sale.price}\r\n        الكمية المُباعة: ${sale.qty}\r\n        تاريخ البيع: ${sale.date}\r\n        ------\r\n        `;\r\n    });\r\n\r\n    text += `---------------------------------`;\r\n    text += `\\n\\n إجمالي عدد عمليات الخصم: ${salesInfo.totalDiscountsSales}`;\r\n    text += `\\n\\n إجمالي عدد عمليات الخصم: ${salesInfo.totalDiscountsSales}`;\r\n    text += `\\n إجمالي مبلغ الخصم: $${salesInfo.totalDiscountsMoney.toLocaleString()}`;\r\n    text += `\\n من أصل إجمالي مبلغ $${salesInfo.totalMoney.toLocaleString()}`;\r\n    text += `\\n هذا التقرير تم إصداره في ${new Date().toLocaleString()}`;\r\n    \r\n    return text;\r\n};\r\n\r\nexport const createDetailedSalesReport = (sales) => {\r\n    const totalMoney = calculateTotalMoneyForDetailedSales(sales);\r\n    const totalSoldPieces = getTotalSoldPiecesForSalesHistory(sales);\r\n\r\n    const salesInfo = {\r\n        sales: sales,\r\n        totalMoney: totalMoney,\r\n        totalSoldPieces: totalSoldPieces,\r\n    };\r\n\r\n    const text = createReportTextForSalesHistory(salesInfo);\r\n    const reportName = \"تقرير بسجل عمليات البيع\";\r\n\r\n    return { text, reportName };\r\n};\r\n\r\nexport const encodeText = (text) => {\r\n    const encoder = new TextEncoder();\r\n    return encoder.encode(text);\r\n}\r\n\r\nexport const downloadReport = (reportText, reportName) => {\r\n    const blob = new Blob([encodeText(reportText)], { type: 'text/plain' });\r\n    // Create The Download Link And Download The File\r\n    const downloadLink = document.createElement(\"a\");\r\n    downloadLink.href = URL.createObjectURL(blob);\r\n    downloadLink.download = `${reportName}.txt`;\r\n    downloadLink.click();\r\n    // Clean up the temporary URL after download (optional)\r\n    URL.revokeObjectURL(downloadLink.href);\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}