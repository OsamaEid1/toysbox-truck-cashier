{"ast":null,"code":"export const getProducts = async () => {\n  try {\n    const response = await fetch(\"db/products.json\");\n    if (!response.ok) {\n      throw new Error('Failed to fetch data');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return null;\n  }\n};\nexport const setProducts = async produc => {\n  try {\n    const response = await fetch(\"db/products.json\");\n    if (!response.ok) {\n      throw new Error('Failed to fetch data');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return null;\n  }\n};\nexport const getProductByBarcode = async barcode => {\n  try {\n    const response = await fetch(\"db/products.json\");\n    if (!response.ok) {\n      throw new Error('Failed to fetch data');\n    }\n    const data = await response.json();\n    const product = data.find(product => product.barcode === barcode);\n    if (!product) {\n      throw new Error('Product not found');\n    }\n    return product;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return null;\n  }\n};\nexport const addNewSell = async product => {\n  try {\n    // Get sales\n    let sales = localStorage.getItem(\"sales\");\n    if (sales) {\n      sales = JSON.parse(sales);\n      sales.push(product);\n      // Save product data to localStorage\n      localStorage.setItem('sales', JSON.stringify(sales));\n    } else {\n      // Save product data to localStorage\n      localStorage.setItem('sales', JSON.stringify([product]));\n    }\n    // Notify user about successful sale\n    alert('Successful Sale!');\n  } catch (error) {\n    // Notify user about failed sale\n    alert('Failed Sale!');\n    console.error('Error while posting data:', error);\n  }\n};\nexport const updateProductStockInDB = async (barcode, newStock) => {\n  // Get All Products\n  const products = await getProducts();\n  // Update Product Stock\n  products.foreach(product => {\n    if (product.barcode === barcode) {\n      product.stock = newStock;\n    }\n  });\n  // Set Updated Products Data\n};","map":{"version":3,"names":["getProducts","response","fetch","ok","Error","data","json","error","console","setProducts","produc","getProductByBarcode","barcode","product","find","addNewSell","sales","localStorage","getItem","JSON","parse","push","setItem","stringify","alert","updateProductStockInDB","newStock","products","foreach","stock"],"sources":["D:/web/Work/ToysBox/Mini Cashear System/mini-toysBox-car-casher-sys/src/helpers.js"],"sourcesContent":["export const getProducts = async () => {\r\n    try {\r\n        const response = await fetch(\"db/products.json\");\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch data');\r\n        }\r\n        \r\n        const data = await response.json();\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        return null;\r\n    }\r\n};\r\nexport const setProducts = async (produc) => {\r\n    try {\r\n        const response = await fetch(\"db/products.json\");\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch data');\r\n        }\r\n        \r\n        const data = await response.json();\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        return null;\r\n    }\r\n};\r\nexport const getProductByBarcode = async (barcode) => {\r\n    try {\r\n        const response = await fetch(\"db/products.json\");\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch data');\r\n        }\r\n        \r\n        const data = await response.json();\r\n        const product = data.find((product) => product.barcode === barcode);\r\n        if (!product) {\r\n            throw new Error('Product not found');\r\n        }\r\n        return product;\r\n    } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const addNewSell = async (product) => {\r\n    try {\r\n        // Get sales\r\n        let sales = localStorage.getItem(\"sales\");\r\n        if (sales) {\r\n            sales = JSON.parse(sales);\r\n            sales.push(product);\r\n            // Save product data to localStorage\r\n            localStorage.setItem('sales', JSON.stringify(sales));\r\n        } else {\r\n            // Save product data to localStorage\r\n            localStorage.setItem('sales', JSON.stringify([product]));\r\n        }\r\n        // Notify user about successful sale\r\n        alert('Successful Sale!');\r\n    } catch (error) {\r\n        // Notify user about failed sale\r\n        alert('Failed Sale!');\r\n        console.error('Error while posting data:', error);\r\n    }\r\n};\r\n\r\nexport const updateProductStockInDB = async (barcode, newStock) => {\r\n    // Get All Products\r\n    const products = await getProducts();\r\n    // Update Product Stock\r\n    products.foreach((product) => {\r\n        if (product.barcode === barcode) {\r\n            product.stock = newStock;\r\n        }\r\n    });\r\n    // Set Updated Products Data\r\n    \r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}