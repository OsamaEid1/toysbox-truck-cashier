{"ast":null,"code":"export const getProducts = async () => {\n  try {\n    const response = await fetch(\"db/products.json\");\n    if (!response.ok) {\n      throw new Error('Failed to fetch data');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return null;\n  }\n};\nexport const getProductByBarcode = async barcode => {\n  try {\n    const response = await fetch(\"db/products.json\");\n    if (!response.ok) {\n      throw new Error('Failed to fetch data');\n    }\n    const data = await response.json();\n    console.log(data);\n    const product = data.find(product => product.barcode === barcode);\n    if (!product) {\n      throw new Error('Product not found');\n    }\n    return product;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return null;\n  }\n};\nexport const searchOnProductByName = (products, targetProductName) => {\n  const matchingProducts = [];\n  products.forEach(product => {\n    const productName = product.name;\n    if (productName.toLowerCase().includes(targetProductName.toLowerCase())) {\n      matchingProducts.push(product);\n    }\n  });\n  return matchingProducts;\n};\nexport const searchOnProductByBarcode = (products, barcode) => {\n  const targetProduct = products.find(product => product.barcode === barcode);\n  if (targetProduct) return targetProduct;\n  return false;\n};\nexport const addNewSell = async product => {\n  try {\n    // Get sales\n    let sales = localStorage.getItem(\"sales\");\n    if (sales) {\n      sales = JSON.parse(sales);\n      sales.push(product);\n      // Save product data to localStorage\n      localStorage.setItem('sales', JSON.stringify(sales));\n    } else {\n      // Save product data to localStorage\n      localStorage.setItem('sales', JSON.stringify([product]));\n    }\n    return true;\n  } catch (error) {\n    console.error('Error while posting data:', error);\n    return false;\n  }\n};\nexport const countRepeatedSales = soldProducts => {\n  // Create a map to store the aggregated quantities\n  const qtyMap = new Map();\n\n  // Iterate through the products array\n  for (const product of soldProducts) {\n    const {\n      barcode,\n      qty,\n      price\n    } = product;\n\n    // If the barcode is not in the map, initialize it with the current qty\n    if (!qtyMap.has(barcode)) {\n      qtyMap.set(barcode, {\n        ...product,\n        totalSoldQty: +qty,\n        totalPrice: Math.ceil(price) * qty,\n        numOfRepeatSales: 1\n      });\n    } else {\n      // Otherwise, update the existing entry\n      const existingProduct = qtyMap.get(barcode);\n      existingProduct.totalSoldQty += +qty;\n      existingProduct.numOfRepeatSales++;\n      existingProduct.totalPrice += Math.ceil(+price) * qty;\n    }\n  }\n\n  // Convert the map values back to an array\n  const summedProducts = Array.from(qtyMap.values());\n  return summedProducts;\n};\nexport const getSalesSummary = salesData => {\n  return countRepeatedSales(salesData);\n};\nexport const calculateTotalMoneyForSummary = sales => {\n  const totalMoney = sales.reduce((total, sale) => {\n    return total += sale.totalPrice;\n  }, 0);\n  return totalMoney;\n};\nexport const calculateTotalMoneyForDetailedSales = sales => {\n  const totalMoney = sales.reduce((total, sale) => {\n    return total += sale.qty * Math.ceil(sale.price);\n  }, 0);\n  return totalMoney;\n};\nexport const calculateTotalMoneyForDiscountedSales = sales => {\n  const totalMoney = sales.reduce((total, sale) => {\n    return total += sale.qty * sale.priceBeforeDiscount;\n  }, 0);\n  return totalMoney;\n};\nexport const getTotalSoldPiecesForSummarySales = sales => {\n  return sales.reduce((total, sale) => {\n    return total += +sale.totalSoldQty;\n  }, 0);\n};\nexport const getTotalSoldPiecesForSalesHistory = sales => {\n  return sales.reduce((total, sale) => {\n    return total += +sale.qty;\n  }, 0);\n};","map":{"version":3,"names":["getProducts","response","fetch","ok","Error","data","json","error","console","getProductByBarcode","barcode","log","product","find","searchOnProductByName","products","targetProductName","matchingProducts","forEach","productName","name","toLowerCase","includes","push","searchOnProductByBarcode","targetProduct","addNewSell","sales","localStorage","getItem","JSON","parse","setItem","stringify","countRepeatedSales","soldProducts","qtyMap","Map","qty","price","has","set","totalSoldQty","totalPrice","Math","ceil","numOfRepeatSales","existingProduct","get","summedProducts","Array","from","values","getSalesSummary","salesData","calculateTotalMoneyForSummary","totalMoney","reduce","total","sale","calculateTotalMoneyForDetailedSales","calculateTotalMoneyForDiscountedSales","priceBeforeDiscount","getTotalSoldPiecesForSummarySales","getTotalSoldPiecesForSalesHistory"],"sources":["D:/web/Free_Projects/mini-toysBox-truck-cashier-sys/src/helpers.js"],"sourcesContent":["export const getProducts = async () => {\r\n    try {\r\n        const response = await fetch(\"db/products.json\");\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch data');\r\n        }\r\n        \r\n        const data = await response.json();\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        return null;\r\n    }\r\n};\r\nexport const getProductByBarcode = async (barcode) => {\r\n    try {\r\n        const response = await fetch(\"db/products.json\");\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch data');\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log(data);\r\n        const product = data.find((product) => product.barcode === barcode);\r\n        if (!product) {\r\n            throw new Error('Product not found');\r\n        }\r\n        return product;\r\n    } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        return null;\r\n    }\r\n};\r\nexport const searchOnProductByName = (products, targetProductName) => {\r\n    const matchingProducts = []\r\n    products.forEach((product) => {\r\n        const productName = product.name;\r\n        if (productName.toLowerCase().includes(targetProductName.toLowerCase())) {\r\n            matchingProducts.push(product)\r\n        }\r\n    });\r\n    return matchingProducts;\r\n};\r\nexport const searchOnProductByBarcode = (products, barcode) => {\r\n    const targetProduct = products.find(product => product.barcode === barcode);\r\n    if (targetProduct) return targetProduct;\r\n    return false;\r\n};\r\nexport const addNewSell = async (product) => {\r\n    try {\r\n        // Get sales\r\n        let sales = localStorage.getItem(\"sales\");\r\n        if (sales) {\r\n            sales = JSON.parse(sales);\r\n            sales.push(product);\r\n            // Save product data to localStorage\r\n            localStorage.setItem('sales', JSON.stringify(sales));\r\n        } else {\r\n            // Save product data to localStorage\r\n            localStorage.setItem('sales', JSON.stringify([product]));\r\n        }\r\n        return true;\r\n    } catch (error) {\r\n        console.error('Error while posting data:', error);\r\n        return false;\r\n    }\r\n};\r\n\r\nexport const countRepeatedSales = (soldProducts) => {\r\n    // Create a map to store the aggregated quantities\r\n    const qtyMap = new Map();\r\n\r\n    // Iterate through the products array\r\n    for (const product of soldProducts) {\r\n        const { barcode, qty, price } = product;\r\n\r\n        // If the barcode is not in the map, initialize it with the current qty\r\n        if (!qtyMap.has(barcode)) {\r\n            qtyMap.set(barcode, { ...product, totalSoldQty: +qty, totalPrice: Math.ceil(price) * qty, numOfRepeatSales: 1 });\r\n        } else {\r\n            // Otherwise, update the existing entry\r\n            const existingProduct = qtyMap.get(barcode);\r\n            existingProduct.totalSoldQty += +qty;\r\n            existingProduct.numOfRepeatSales++;\r\n            existingProduct.totalPrice += Math.ceil(+price) * qty;\r\n        }\r\n    }\r\n\r\n    // Convert the map values back to an array\r\n    const summedProducts = Array.from(qtyMap.values());\r\n    return summedProducts;\r\n}\r\nexport const getSalesSummary = (salesData) => {\r\n    return countRepeatedSales(salesData);\r\n};\r\n\r\nexport const calculateTotalMoneyForSummary = (sales) => {\r\n    const totalMoney = sales.reduce((total, sale) => {\r\n        return total += sale.totalPrice;\r\n    }, 0);\r\n    return totalMoney;\r\n};\r\nexport const calculateTotalMoneyForDetailedSales = (sales) => {\r\n    const totalMoney = sales.reduce((total, sale) => {\r\n        return total += sale.qty * Math.ceil(sale.price);\r\n    }, 0);\r\n    return totalMoney;\r\n};\r\nexport const calculateTotalMoneyForDiscountedSales = (sales) => {\r\n    const totalMoney = sales.reduce((total, sale) => {\r\n        return total += sale.qty * sale.priceBeforeDiscount;\r\n    }, 0);\r\n    return totalMoney;\r\n};\r\n\r\nexport const getTotalSoldPiecesForSummarySales = (sales) => {\r\n    return sales.reduce((total, sale) => {\r\n        return total += +sale.totalSoldQty;\r\n    }, 0)\r\n}\r\nexport const getTotalSoldPiecesForSalesHistory = (sales) => {\r\n    return sales.reduce((total, sale) => {\r\n        return total += +sale.qty;\r\n    }, 0)\r\n}\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}