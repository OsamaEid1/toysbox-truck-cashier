{"ast":null,"code":"export const getProducts=async()=>{try{const response=await fetch(\"db/products.json\");if(!response.ok){throw new Error('Failed to fetch data');}const data=await response.json();return data;}catch(error){console.error('Error fetching data:',error);return null;}};export const getProductByBarcode=async barcode=>{try{const response=await fetch(\"db/products.json\");if(!response.ok){throw new Error('Failed to fetch data');}const data=await response.json();console.log(data);const product=data.find(product=>product.barcode===barcode);if(!product){throw new Error('Product not found');}return product;}catch(error){console.error('Error fetching data:',error);return null;}};export const searchOnProductByName=(products,targetProductName)=>{const matchingProducts=[];products.forEach(product=>{const productName=product.name;if(productName.toLowerCase().includes(targetProductName.toLowerCase())){matchingProducts.push(product);}});return matchingProducts;};export const searchOnProductByBarcode=(products,barcode)=>{const targetProduct=products.find(product=>product.barcode===barcode);if(targetProduct)return targetProduct;return false;};export const addNewSell=async product=>{try{// Get sales\nlet sales=localStorage.getItem(\"sales\");if(sales){sales=JSON.parse(sales);sales.push(product);// Save product data to localStorage\nlocalStorage.setItem('sales',JSON.stringify(sales));}else{// Save product data to localStorage\nlocalStorage.setItem('sales',JSON.stringify([product]));}return true;}catch(error){console.error('Error while posting data:',error);return false;}};export const countRepeatedSales=soldProducts=>{// Create a map to store the aggregated quantities\nconst qtyMap=new Map();// Iterate through the products array\nfor(const product of soldProducts){const{barcode,qty,price}=product;// If the barcode is not in the map, initialize it with the current qty\nif(!qtyMap.has(barcode)){qtyMap.set(barcode,{...product,totalSoldQty:+qty,totalPrice:Math.ceil(price)*qty,numOfRepeatSales:1});}else{// Otherwise, update the existing entry\nconst existingProduct=qtyMap.get(barcode);existingProduct.totalSoldQty+=+qty;existingProduct.numOfRepeatSales++;existingProduct.totalPrice+=Math.ceil(+price)*qty;}}// Convert the map values back to an array\nconst summedProducts=Array.from(qtyMap.values());return summedProducts;};export const calculateTotalMoneyForSummary=sales=>{let total=0;sales.forEach(sale=>{total+=sale.totalPrice;console.log(sale);});return total;};export const calculateTotalMoneyForDetailedSales=sales=>{let total=0;sales.forEach(sale=>{total+=sale.qty*Math.ceil(sale.price);});return total;};export const calculateTotalMoneyForDiscountedSales=sales=>{let total=0;sales.forEach(sale=>{total+=sale.qty*Math.ceil(sale.price);});return total;};// export const postAllProductsWithUpdates = async (products) => {\n//     try {\n//         const response = await fetch(\"http://localhost:4000/sales\", {\n//             method: 'POST',\n//             // mode: 'no-cors',\n//             headers: {'Content-Type': 'application/json'},\n//             body: JSON.stringify(products),\n//         });\n//         if (!response.ok) {\n//             throw new Error(`Failed to Update Product Stock, And Status Is: ${response.statusText}`);\n//         }\n//         return true;\n//     } catch (error) {\n//         console.error(error);\n//         return null;\n//     }\n// };\n// export const updateProductStockInDB = async (barcode, newStock) => {\n//     // Get All Products\n//     const products = await getProducts();\n//     // Update Product Stock\n//     products.forEach((product) => {\n//         if (product.barcode === barcode) {\n//             product.stock = newStock;\n//         }\n//     });\n//     console.log(products);\n//     // Set Updated Products Data And Return Operation State\n//     return postAllProductsWithUpdates(products);\n// };","map":{"version":3,"names":["getProducts","response","fetch","ok","Error","data","json","error","console","getProductByBarcode","barcode","log","product","find","searchOnProductByName","products","targetProductName","matchingProducts","forEach","productName","name","toLowerCase","includes","push","searchOnProductByBarcode","targetProduct","addNewSell","sales","localStorage","getItem","JSON","parse","setItem","stringify","countRepeatedSales","soldProducts","qtyMap","Map","qty","price","has","set","totalSoldQty","totalPrice","Math","ceil","numOfRepeatSales","existingProduct","get","summedProducts","Array","from","values","calculateTotalMoneyForSummary","total","sale","calculateTotalMoneyForDetailedSales","calculateTotalMoneyForDiscountedSales"],"sources":["D:/web/Free_Projects/mini-toysBox-truck-cashier-sys/src/helpers.js"],"sourcesContent":["export const getProducts = async () => {\r\n    try {\r\n        const response = await fetch(\"db/products.json\");\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch data');\r\n        }\r\n        \r\n        const data = await response.json();\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        return null;\r\n    }\r\n};\r\nexport const getProductByBarcode = async (barcode) => {\r\n    try {\r\n        const response = await fetch(\"db/products.json\");\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch data');\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log(data);\r\n        const product = data.find((product) => product.barcode === barcode);\r\n        if (!product) {\r\n            throw new Error('Product not found');\r\n        }\r\n        return product;\r\n    } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        return null;\r\n    }\r\n};\r\nexport const searchOnProductByName = (products, targetProductName) => {\r\n    const matchingProducts = []\r\n    products.forEach((product) => {\r\n        const productName = product.name;\r\n        if (productName.toLowerCase().includes(targetProductName.toLowerCase())) {\r\n            matchingProducts.push(product)\r\n        }\r\n    });\r\n    return matchingProducts;\r\n};\r\nexport const searchOnProductByBarcode = (products, barcode) => {\r\n    const targetProduct = products.find(product => product.barcode === barcode);\r\n    if (targetProduct) return targetProduct;\r\n    return false;\r\n};\r\nexport const addNewSell = async (product) => {\r\n    try {\r\n        // Get sales\r\n        let sales = localStorage.getItem(\"sales\");\r\n        if (sales) {\r\n            sales = JSON.parse(sales);\r\n            sales.push(product);\r\n            // Save product data to localStorage\r\n            localStorage.setItem('sales', JSON.stringify(sales));\r\n        } else {\r\n            // Save product data to localStorage\r\n            localStorage.setItem('sales', JSON.stringify([product]));\r\n        }\r\n        return true;\r\n    } catch (error) {\r\n        console.error('Error while posting data:', error);\r\n        return false;\r\n    }\r\n};\r\n\r\nexport const countRepeatedSales = (soldProducts) => {\r\n    // Create a map to store the aggregated quantities\r\n    const qtyMap = new Map();\r\n\r\n    // Iterate through the products array\r\n    for (const product of soldProducts) {\r\n        const { barcode, qty, price } = product;\r\n\r\n        // If the barcode is not in the map, initialize it with the current qty\r\n        if (!qtyMap.has(barcode)) {\r\n            qtyMap.set(barcode, { ...product, totalSoldQty: +qty, totalPrice: Math.ceil(price) * qty, numOfRepeatSales: 1 });\r\n        } else {\r\n            // Otherwise, update the existing entry\r\n            const existingProduct = qtyMap.get(barcode);\r\n            existingProduct.totalSoldQty += +qty;\r\n            existingProduct.numOfRepeatSales++;\r\n            existingProduct.totalPrice += Math.ceil(+price) * qty;\r\n        }\r\n    }\r\n\r\n    // Convert the map values back to an array\r\n    const summedProducts = Array.from(qtyMap.values());\r\n    return summedProducts;\r\n}\r\nexport const calculateTotalMoneyForSummary = (sales) => {\r\n    let total = 0;\r\n    sales.forEach(sale => {\r\n        total += sale.totalPrice;\r\n        console.log(sale);\r\n    });\r\n    return total;\r\n};\r\nexport const calculateTotalMoneyForDetailedSales = (sales) => {\r\n    let total = 0;\r\n    sales.forEach(sale => {\r\n        total += sale.qty * Math.ceil(sale.price);\r\n    });\r\n    return total;\r\n};\r\nexport const calculateTotalMoneyForDiscountedSales = (sales) => {\r\n    let total = 0;\r\n    sales.forEach(sale => {\r\n        total += sale.qty * Math.ceil(sale.price);\r\n    });\r\n    return total;\r\n};\r\n// export const postAllProductsWithUpdates = async (products) => {\r\n//     try {\r\n//         const response = await fetch(\"http://localhost:4000/sales\", {\r\n//             method: 'POST',\r\n//             // mode: 'no-cors',\r\n//             headers: {'Content-Type': 'application/json'},\r\n//             body: JSON.stringify(products),\r\n//         });\r\n//         if (!response.ok) {\r\n//             throw new Error(`Failed to Update Product Stock, And Status Is: ${response.statusText}`);\r\n//         }\r\n        \r\n//         return true;\r\n//     } catch (error) {\r\n//         console.error(error);\r\n//         return null;\r\n//     }\r\n// };\r\n\r\n// export const updateProductStockInDB = async (barcode, newStock) => {\r\n//     // Get All Products\r\n//     const products = await getProducts();\r\n//     // Update Product Stock\r\n//     products.forEach((product) => {\r\n//         if (product.barcode === barcode) {\r\n//             product.stock = newStock;\r\n//         }\r\n//     });\r\n//     console.log(products);\r\n//     // Set Updated Products Data And Return Operation State\r\n//     return postAllProductsWithUpdates(products);\r\n// };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}